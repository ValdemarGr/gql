"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[227],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),o=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=o(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),y=o(t),u=r,d=y["".concat(l,".").concat(u)]||y[u]||m[u]||s;return t?a.createElement(d,i(i({ref:n},c),{},{components:t})):a.createElement(d,i({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=y;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var o=2;o<s;o++)i[o]=t[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>o});var a=t(7462),r=(t(7294),t(3905));const s={title:"Structuring large applications"},i=void 0,p={unversionedId:"server/schema/structuring_apps",id:"server/schema/structuring_apps",title:"Structuring large applications",description:"The documentation explores smaller examples.",source:"@site/docs/server/schema/structuring_apps.md",sourceDirName:"server/schema",slug:"/server/schema/structuring_apps",permalink:"/gql/docs/server/schema/structuring_apps",draft:!1,editUrl:"https://github.com/valdemargr/gql/tree/main/docs/server/schema/structuring_apps.md",tags:[],version:"current",frontMatter:{title:"Structuring large applications"},sidebar:"docs",previous:{title:"Extending schemas",permalink:"/gql/docs/server/schema/extending"},next:{title:"Planning",permalink:"/gql/docs/server/execution/planning"}},l={},o=[{value:"Seperating domains",id:"seperating-domains",level:2},{value:"Mutually recursive domains",id:"mutually-recursive-domains",level:2},{value:"Call by name constructor parameters",id:"call-by-name-constructor-parameters",level:3},{value:"Cake",id:"cake",level:3}],c={toc:o};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The documentation explores smaller examples.\nTo host larger graphs there are some considerations that must be addressed."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"What up-front work can be done to minimize the overhead in introducing new types."),(0,r.kt)("li",{parentName:"ul"},"How is (mutual) recursion handled between different domains.")),(0,r.kt)("p",null,"Recursive datatypes are notoriously difficult to deal with.\nIn functional programming lazyness is often exploited as a solution to introduce cyclic data, but can easily accidentally introduce infinite recursion."),(0,r.kt)("h2",{id:"seperating-domains"},"Seperating domains"),(0,r.kt)("p",null,"Partially applying all needed dependencies can be expressed with a class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\nimport gql._\nimport gql.ast._\nimport gql.dsl._\n\nfinal case class Organization(\n  id: String,\n  name: String\n)\n\nfinal case class User(\n  id: String,\n  name: String,\n  organizationId: String\n)\n\ntrait Repo {\n  def getUser(id: String): IO[User]\n  def getOrganization(id: String): IO[Organization]\n  def getOrganizationUsers(organizationId: String): IO[List[User]]\n}\n\nclass UserTypes(repo: Repo) {\n  // notice how we bind the effect (IO) so that we can omit this parameter in the dsl\n  val dsl = new GqlDsl[IO] {}\n  import dsl._\n\n  implicit val organization: Type[IO, Organization] = \n    tpe[Organization](\n      "Organization",\n      "id" -> lift(_.id),\n      "name" -> lift(_.name),\n      "users" -> eff(x => repo.getOrganizationUsers(x.id))\n    )\n\n  implicit val user: Type[IO, User] =\n    tpe[User](\n      "User",\n      "id" -> lift(_.id),\n      "name" -> lift(_.name),\n      "organization" -> eff(x => repo.getOrganization(x.organizationId))\n    )\n}\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"You can also extend the dsl if you prefer a more object oriented style."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"class UserTypes(repo: Repo) extends GqlDsl[IO] {\n  // ...\n}\n"))),(0,r.kt)("h2",{id:"mutually-recursive-domains"},"Mutually recursive domains"),(0,r.kt)("p",null,"Subgraphs can neatly packaged into classes, but that does not address the issue of recursion between different domains."),(0,r.kt)("h3",{id:"call-by-name-constructor-parameters"},"Call by name constructor parameters"),(0,r.kt)("p",null,"A compositional approach is to use call by name constructor parameters to lazily pass mutually recursive dependencies."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"class UserTypes(paymentTypes: => PaymentTypes) {\n  lazy val p = paymentTypes\n  import p._\n  // ...\n}\n\nclass PaymentTypes(userTypes: => UserTypes) {\n  lazy val u = userTypes\n  import u._\n  // ...\n}\n\nlazy val userTypes: UserTypes = new UserTypes(paymentTypes)\nlazy val paymentTypes: PaymentTypes = new PaymentTypes(userTypes)\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When domain types are defined in seperate projects, OOP interfaces can be used to implement mutual recursion."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"// core project\ntrait User\ntrait UserTypes {\n  // we can also choose to only expose the datatypes that are necessary\n  implicit def userType: Type[IO, User]\n}\ntrait Payment\ntrait PaymentTypes {\n  implicit def paymentType: Type[IO, Payment]\n}\n\n// user project\nclass UserTypesImpl(paymentTypes: => PaymentTypes) extends UserTypes {\n  lazy val p = paymentTypes\n  import p._\n  def userType: Type[IO, User] = ???\n}\n\n// payment project\nclass PaymentTypesImpl(userTypes: => UserTypes) extends PaymentTypes {\n  lazy val u = userTypes\n  import u._\n  def paymentType: Type[IO, Payment] = ???\n}\n\n// main project\nlazy val userTypes: UserTypes = new UserTypesImpl(paymentTypes)\nlazy val paymentTypes: PaymentTypes = new PaymentTypesImpl(userTypes)\n"))),(0,r.kt)("h3",{id:"cake"},"Cake"),(0,r.kt)("p",null,"The cake pattern can also be used to define mutually recursive dependencies, at the cost of composability."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"// core project\ntrait User\ntrait UserTypes {\n  // we can also choose to only expose the datatypes that are necessary\n  implicit def userType: Type[IO, User]\n}\ntrait Payment\ntrait PaymentTypes {\n  implicit def paymentType: Type[IO, Payment]\n}\n\n// user project\ntrait UserTypesImpl extends UserTypes { self: PaymentTypes =>\n  import self._\n  def userType: Type[IO, User] = ???\n}\n\n// payment project\ntrait PaymentTypesImpl extends PaymentTypes { self: UserTypes =>\n  import self._\n  def paymentType: Type[IO, Payment] = ???\n}\n\n// main project\nval allTypes = new UserTypesImpl with PaymentTypesImpl { }\n// allTypes: AnyRef with UserTypesImpl with PaymentTypesImpl = repl.MdocSession$MdocApp$$anon$2@620155b2\n")))}m.isMDXComponent=!0}}]);