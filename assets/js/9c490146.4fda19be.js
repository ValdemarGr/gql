"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[24],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||i;return n?r.createElement(d,o(o({ref:t},s),{},{components:n})):r.createElement(d,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"Compiler"},o=void 0,l={unversionedId:"schema/compiler",id:"schema/compiler",title:"Compiler",description:"The Compiler is a utility for combining multiple parts of gql into a single executable.",source:"@site/docs/schema/compiler.md",sourceDirName:"schema",slug:"/schema/compiler",permalink:"/gql/docs/schema/compiler",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/schema/compiler.md",tags:[],version:"current",frontMatter:{title:"Compiler"},sidebar:"docs",previous:{title:"Error handling",permalink:"/gql/docs/schema/error_handling"},next:{title:"Digraph philosophy",permalink:"/gql/docs/schema/graph_philosophy"}},c={},p=[],s={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Compiler")," is a utility for combining multiple parts of ",(0,a.kt)("inlineCode",{parentName:"p"},"gql")," into a single executable."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Compiler")," utility has the task of parsing, preparing (validating) and construction an executable version of a GraphQL query.\nThe output of query compilation is either an error or an ",(0,a.kt)("inlineCode",{parentName:"p"},"Application"),"; an executable version of the query that closes over all required inputs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import gql._\n\nsealed trait Application[F[_]]\nobject Application {\n  final case class Query[F[_]](run: F[QueryResult]) extends Application[F]\n  final case class Mutation[F[_]](run: F[QueryResult]) extends Application[F]\n  final case class Subscription[F[_]](run: fs2.Stream[F, QueryResult]) extends Application[F]\n}\n")),(0,a.kt)("p",null,"For most non-trivial applications a compiler will usually be a bit more complex than only performing query execution related tasks.\nFor instance production deployments do usually implement additional features such as caching, logging, metrics, tracing, authorization, to name a few.\nThe parts of ",(0,a.kt)("inlineCode",{parentName:"p"},"gql")," that the compiler utility composes (parsing, preparing and assembling an application), are exposed as seperate functions such that any need can be composed with ease."),(0,a.kt)("p",null,"For instance, say that we would like to modify a phase in query compilation, such that the final executable logs queries that are too slow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import gql._\nimport cats.implicits._\nimport cats.effect._\nimport cats.effect.implicits._\nimport scala.concurrent.duration._\n\ntrait Logger[F[_]] {\n  def warn(msg: String): F[Unit]\n}\n\ndef lg: Logger[IO] = ???\n\ndef logSlowQueries(\n  compiler: CompilerParameters => Application[IO]\n): CompilerParameters => Application[IO] = cp => \n  compiler(cp) match {\n    case Application.Query(fa) => \n      Application.Query {\n        fa.timed.flatMap{ case (dur, a) =>\n          if (dur > 1.second) lg.warn(s"Slow query: ${cp.query}") as a\n          else IO.pure(a)\n        }\n      }\n    case x => x\n  }\n')))}u.isMDXComponent=!0}}]);