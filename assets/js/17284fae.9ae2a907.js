"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[402],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(t),u=r,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return t?a.createElement(f,o(o({ref:n},l),{},{components:t})):a.createElement(f,o({ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5555:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={title:"Example"},o="Example",p={unversionedId:"example",id:"example",title:"Example",description:"gql is a GraphQL implementation.",source:"@site/docs/example.md",sourceDirName:".",slug:"/example",permalink:"/gql/docs/example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/example.md",tags:[],version:"current",frontMatter:{title:"Example"},sidebar:"docs",next:{title:"Getting started",permalink:"/gql/docs/test"}},s={},c=[],l={toc:c};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"example"},"Example"),(0,r.kt)("p",null,"gql is a GraphQL implementation.\ngql comes with many of the standard features of a GraphQL implementation such as a dsl, parser and interpreter.\nBut also some unique features such as, herustic query planning and signals.\nThe most important goals of gql is to be simple, predictable and composable."),(0,r.kt)("p",null,"For this showcase, Star Wars will be out domain of choice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait Episode\nobject Episode {\n  case object NewHope extends Episode\n  case object Empire extends Episode\n  case object Jedi extends Episode\n}\n  \ntrait Character {\n  def id: String\n  def name: Option[String]\n  def friends: Option[List[Character]]\n  def appearsIn: Option[List[Episode]]\n}\n\nfinal case class Human(\n  id: String,\n  name: Option[String],\n  friends: Option[List[Character]],\n  appearsIn: Option[List[Episode]],\n  homePlanet: Option[String]\n) extends Character\n\nfinal case class Droid(\n  id: String,\n  name: Option[String],\n  friends: Option[List[Character]],\n  appearsIn: Option[List[Episode]],\n  primaryFunction: Option[String]\n) extends Character\n")),(0,r.kt)("p",null,"To construct the schema, we need to import the ",(0,r.kt)("inlineCode",{parentName:"p"},"ast")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"dsl"),".\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"ast")," is an adt representation of the GraphQL schema language.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"dsl")," is a thin collection of smart constructors for the ",(0,r.kt)("inlineCode",{parentName:"p"},"ast"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import gql.dsl._\nimport gql.ast._\n")),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"dsl")," smart constructors in scope; we can now construct the schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.implicits._\nimport gql._\n\ntrait Repository[F[_]] {\n  def getHero(episode: Episode): F[Character]\n\n  def getCharacter(id: String): F[Character]\n\n  def getHuman(id: String): F[Human]\n\n  def getDroid(id: String): F[Droid]\n}\n\ndef schema[F[_]: Applicative](implicit repo: Repository[F]) = {\n  implicit val episode: Enum[F, Episode] = {\n    import Episode._\n    enum(\n      "Episode",\n      "NEWHOPE" -> NewHope,\n      "EMPIRE" -> Empire,\n      "JEDI" -> Jedi\n    )\n  }\n\n  implicit lazy val human: Type[F, Human] =\n    tpe(\n      "Human",\n      "homePlanet" -> pure(_.homePlanet),\n      character.fields.toList: _*\n    )\n\n  implicit lazy val droid: Type[F, Droid] =\n    tpe(\n      "Droid",\n      "primaryFunction" -> pure(_.primaryFunction),\n      character.fields.toList: _*\n    )\n\n  implicit lazy val character: Interface[F, Character] =\n    interface[F, Character](\n      "Character",\n      "id" -> pure(_.id),\n      "name" -> pure(_.name),\n      "friends" -> pure(_.friends),\n      "appearsIn" -> pure(_.appearsIn)\n    )(\n      instance[Human] { case x: Human => x },\n      instance[Droid] { case x: Droid => x }\n    )\n\n  Schema.simple[F, Unit](\n    tpe(\n      "Query",\n      "hero" -> eff(arg[Episode]("episode")) { case (_, episode) => repo.getHero(episode) },\n      "character" -> eff(arg[ID[String]]("id")) { case (_, id) => repo.getCharacter(id.value) },\n      "human" -> eff(arg[ID[String]]("id")) { case (_, id) => repo.getHuman(id.value) },\n      "droid" -> eff(arg[ID[String]]("id")) { case (_, id) => repo.getDroid(id.value) }\n    )\n  )\n}\n')),(0,r.kt)("p",null,"Lets construct a simple in-memory repository and query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\nimport cats.effect.unsafe.implicits.global\n\nimplicit def repo = new Repository[IO] {\n  def getHero(episode: Episode): IO[Character] =\n    IO.pure {\n      episode match {\n        case Episode.NewHope => Droid("1000", Some("R2-D2"), None, Some(List(Episode.NewHope)), Some("Astromech"))\n        case Episode.Empire =>\n          Human("1002", Some("Luke Skywalker"), None, Some(List(Episode.NewHope, Episode.Empire, Episode.Jedi)), Some("Tatooine"))\n        case Episode.Jedi =>\n          Human("1003", Some("Leia Organa"), None, Some(List(Episode.NewHope, Episode.Empire, Episode.Jedi)), Some("Alderaan"))\n      }\n    }\n  def getCharacter(id: String): IO[Character] = ???\n  def getHuman(id: String): IO[Human] = ???\n  def getDroid(id: String): IO[Droid] = ???\n}\n\ndef s = schema[IO]\n\ndef query = """\n query HeroNameQuery {\n   hero(episode: NEWHOPE) {\n     id\n     name\n     ... on Droid {\n       primaryFunction\n     }\n     ... HumanDetails\n   }\n }\n\n fragment HumanDetails on Human {\n   homePlanet\n }\n"""\n')),(0,r.kt)("p",null,"Before running the query, we need to allocate a ",(0,r.kt)("inlineCode",{parentName:"p"},"Statistics")," instance.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Statistics")," algebra serves as the backbone of query planning."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"implicit lazy val stats = Statistics[IO].unsafeRunSync()\n")),(0,r.kt)("p",null,"Now we can parse, plan and evaluate the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def parsed = gql.parser.parse(query).toOption.get\n\ndef program = Execute.executor(parsed, s, Map.empty) match {\n  case Execute.ExecutorOutcome.Query(run) => run(()).map { case (_, output) => output }\n}\n\nprintln(program.unsafeRunSync())\n// object[hero -> {\n//   "primaryFunction" : "Astromech",\n//   "name" : "R2-D2",\n//   "id" : "1000"\n// }]\n')))}d.isMDXComponent=!0}}]);