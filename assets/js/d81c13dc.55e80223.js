"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[483],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),i=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=i(a),d=r,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return a?n.createElement(f,s(s({ref:t},u),{},{components:a})):n.createElement(f,s({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,s[1]=p;for(var i=2;i<l;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8392:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>p,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));const l={title:"Input types"},s=void 0,p={unversionedId:"server/schema/input_types",id:"server/schema/input_types",title:"Input types",description:"An input type In[A] defines an input type that produces an A or an error.",source:"@site/docs/server/schema/input_types.md",sourceDirName:"server/schema",slug:"/server/schema/input_types",permalink:"/gql/docs/server/schema/input_types",draft:!1,editUrl:"https://github.com/valdemargr/gql/tree/main/docs/server/schema/input_types.md",tags:[],version:"current",frontMatter:{title:"Input types"},sidebar:"docs",previous:{title:"Output types",permalink:"/gql/docs/server/schema/output_types"},next:{title:"The DSL",permalink:"/gql/docs/server/schema/dsl"}},o={},i=[{value:"Scalar",id:"scalar",level:2},{value:"Enum",id:"enum",level:2},{value:"Arg",id:"arg",level:2},{value:"Input",id:"input",level:2},{value:"Default values for input objects",id:"default-values-for-input-objects",level:3},{value:"Input validation",id:"input-validation",level:2}],u={toc:i};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"An input type ",(0,r.kt)("inlineCode",{parentName:"p"},"In[A]")," defines an input type that produces an ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," or an error.\nInput types occur as parameters in queries as a way to let the caller provide arguments to query resolution."),(0,r.kt)("h2",{id:"scalar"},"Scalar"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Scalar")," type defines a terminal input type, and can be any json value.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Scalar"),"s act as both input and output types; refer to ",(0,r.kt)("a",{parentName:"p",href:"/gql/docs/server/schema/output_types#scalar"},"output types")," for more information on how scalar types work."),(0,r.kt)("h2",{id:"enum"},"Enum"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum")," type defines a mapping from a string to a value (usually a sealed trait) ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),".\nMore information can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/gql/docs/server/schema/output_types#enum"},"output types")," section."),(0,r.kt)("h2",{id:"arg"},"Arg"),(0,r.kt)("p",null,"The arg type has a couple of uses.\nThe first and simplest way of using args is for, well, arguments.\nThe dsl contains smart constructors that will find the correct implicit ",(0,r.kt)("inlineCode",{parentName:"p"},"In")," type for the argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import gql.dsl.all._\nimport gql.ast._\n\narg[Int]("superCoolArg")\n')),(0,r.kt)("p",null,"Args can also have default values that can be constructed with the smart constructors from the value dsl ",(0,r.kt)("inlineCode",{parentName:"p"},"gql.dsl.value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import gql.dsl.all.value._\n\narg[Int]("superCoolArg", scalar(42))\n')),(0,r.kt)("p",null,"And they can be documented."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'arg[Int]("superCoolArg", scalar(42), "This is a super cool argument")\n\narg[Int]("superCoolArg", "This is a super cool argument")\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Default values are not type-safe, so you can pass any value you want.\nThe default value will however be checked during schema validation, and again during query evaluation, so you will get an error if you pass a value of the wrong type."),(0,r.kt)("p",{parentName:"admonition"},"Input objects makes it difficult to construct a type-safe default value dsl, since input objects might have default values themselves that allow uses of them to only supply a subset of fields.\nConsult the ",(0,r.kt)("a",{parentName:"p",href:"#default-values-for-input-objects"},"Default values for input objects")," subsection for more information.")),(0,r.kt)("p",null,"Args also have an ",(0,r.kt)("inlineCode",{parentName:"p"},"Apply")," (",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," without pure) instance defined for them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.implicits._\n\n(arg[Int]("arg1"), arg[Int]("arg2", scalar(43))).mapN(_ + _)\n\narg[Int]("arg1") *> arg[Int]("arg2", scalar(44))\n')),(0,r.kt)("p",null,"Args can naturally be used in field definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.effect._\n\nfinal case class Data(str: String)\n\ntpe[IO, Data](\n  "Something",\n  "field" -> \n    lift(arg[String]("arg1", scalar("default"))){ case (arg1, data) => \n      data.str + arg1 \n    }\n)\n')),(0,r.kt)("h2",{id:"input"},"Input"),(0,r.kt)("p",null,"An input consists of a ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," along with some fields.\nIt turns out that arguments and fields have the same properties and as such, ",(0,r.kt)("inlineCode",{parentName:"p"},"Arg")," is used for fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'final case class InputData(\n  name: String,\n  age: Int\n)\n\ninput[InputData](\n  "InputData",\n  (\n    arg[String]("name"),\n    arg[Int]("age", scalar(42))\n  ).mapN(InputData.apply)\n)\n')),(0,r.kt)("h3",{id:"default-values-for-input-objects"},"Default values for input objects"),(0,r.kt)("p",null,"For input objects however, a default value cannot be properly type checked at compile time, since the default value might be partial.\nFor instance, cosider the following input type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'final case class SomeInput(\n  a: Int,\n  b: String,\n  c: Seq[Int],\n  d: Option[Int]\n)\n\nimplicit lazy val someInput: Input[SomeInput] = input[SomeInput](\n  "SomeInput",\n  (\n    arg[Int]("a", scalar(42)),\n    arg[String]("b"),\n    arg[Seq[Int]]("c", arr(scalar(1), scalar(2), scalar(3))),\n    arg[Option[Int]]("d", scalar(42))\n  ).mapN(SomeInput.apply)\n)\n')),(0,r.kt)("p",null,"Two valid uses of this type could for instance be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'arg[SomeInput](\n  "someInput1",\n  obj(\n    "a" -> scalar(42),\n    "b" -> scalar("hello1"),\n    "c" -> arr(Seq(1, 2, 3).map(scalar(_)): _*)\n  )\n)\n\narg[SomeInput](\n  "someInput2",\n  obj(\n    "b" -> scalar("hello2"),\n    "d" -> nullValue\n  )\n)\n')),(0,r.kt)("h2",{id:"input-validation"},"Input validation"),(0,r.kt)("p",null,"Naturally input can also be validated.\nA function ",(0,r.kt)("inlineCode",{parentName:"p"},"emap")," exists on arg, that maps the input to ",(0,r.kt)("inlineCode",{parentName:"p"},"Either[String, B]")," for some ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.data._\n\nfinal case class ValidatedInput(\n  a: Int,\n  b: NonEmptyList[Int]\n)\n\ninput[ValidatedInput](\n  "ValidatedInput",\n  (\n    arg[Int]("a", scalar(42), "May not be negative")\n      .emap(i => if (i < 0) s"Negative value: $i".asLeft else i.asRight),\n      \n    arg[Seq[Int]]("b", arr(scalar(1), scalar(2), scalar(3)), "NonEmpty")\n      .emap(xs => xs.toList.toNel.toRight("Input is empty.")),\n      \n  ).mapN(ValidatedInput.apply)\n   .emap(v => if (v.a > v.b.combineAll) "a must be larger than the sum of bs".asLeft else v.asRight)\n).document("The field `a` must be larger than the sum of `b`.")\n')))}c.isMDXComponent=!0}}]);