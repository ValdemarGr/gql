"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[338],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(n),m=o,d=h["".concat(p,".").concat(m)]||h[m]||u[m]||a;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={title:"Http4s"},i=void 0,s={unversionedId:"server/integrations/http4s",id:"server/integrations/http4s",title:"Http4s",description:"The http4s integration consists of two routes, one for synchronous requests and one for websocket requests.",source:"@site/docs/server/integrations/http4s.md",sourceDirName:"server/integrations",slug:"/server/integrations/http4s",permalink:"/gql/docs/server/integrations/http4s",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/server/integrations/http4s.md",tags:[],version:"current",frontMatter:{title:"Http4s"},sidebar:"docs",previous:{title:"Statistics",permalink:"/gql/docs/server/execution/statistics"},next:{title:"GraphQL-WS",permalink:"/gql/docs/server/integrations/graphqlws"}},p={},l=[{value:"Implementing authorization",id:"implementing-authorization",level:2},{value:"Websocket support",id:"websocket-support",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The http4s integration consists of two routes, one for synchronous requests and one for websocket requests."),(0,o.kt)("p",null,"The two routes have different signatures since ordinary Request/Response queries use headers to pass most information, but grahpql websocket protocols pass it in a payload."),(0,o.kt)("p",null,"Consider the following example of a synchronous http4s route that serves a graphql api:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\nimport cats.data._\nimport org.http4s._\nimport gql._\nimport gql.http4s._\n\ndef mySchema: Schema[IO, Unit, Unit, Unit] = ???\n\ndef http4sCompiler: HttpRoutes[IO] = Http4sRoutes.syncSimple[IO]{ qp => \n  IO(Right(Compiler[IO].compileWith(mySchema, qp)))\n}\n")),(0,o.kt)("h2",{id:"implementing-authorization"},"Implementing authorization"),(0,o.kt)("p",null,"Something most applications need is authorization.\nThere is no build-in support for this, since authorization is usually very application specific.\nHowever, it is very simple to implement the authorization your application needs."),(0,o.kt)("p",null,"Commonly, authorization is provided in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorization")," http header.\nConsider the following authorization implementation, that also threads authorization credentials through the whole graph."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import org.http4s._\nimport org.http4s.headers._\nimport org.http4s.dsl.io._\nimport cats.data._\nimport cats._\nimport cats.effect._\nimport gql._\nimport gql.http4s._\n\nfinal case class Creds(userId: String)\n\ntype AuthIO[A] = Kleisli[IO, Creds, A]\n\ndef schema: Schema[AuthIO, Unit, Unit, Unit] = ???\n\ndef authorize(token: String): IO[Option[Creds]] = ???\n\ndef routes = Http4sRoutes.syncFull[IO]{ headers =>\n  def unauth(msg: String) = \n    IO.pure(Left(Response[IO](Status.Unauthorized).withEntity(msg)))\n\n  headers.get[Authorization] match {\n    case None => unauth("missing authorization header")\n    case Some(Authorization(Credentials.Token(AuthScheme.Bearer, token))) =>\n      authorize(token).flatMap{\n        case None => unauth("invalid token")\n        case Some(creds) => IO.pure { \n          Right { (qp: QueryParameters) =>\n            IO.pure{\n              Right {\n                Compiler[AuthIO]\n                  .compileWith(schema, qp)\n                  .map(_.mapK(Kleisli.applyK[IO, Creds](creds)))\n              }\n            }\n          }\n        }\n      }\n    case _ => unauth("invalid authorization header, use a Bearer Token")\n  }\n}\n')),(0,o.kt)("p",null,"There is some wrapping in ",(0,o.kt)("inlineCode",{parentName:"p"},"Either")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"IO"),", since we don't want to parse or prepare the query before authorization has been performed."),(0,o.kt)("h2",{id:"websocket-support"},"Websocket support"),(0,o.kt)("p",null,"To implement streaming, we use websockets.\nThe websocket route is implemented via a curried function, like the http route, to facilitate pre-parse authorization."),(0,o.kt)("p",null,"Parameters are passed in graphqlws via a json object payload.\nThe structure of this json payload is not constrained; this is up to the application to consider."),(0,o.kt)("p",null,"However, the norm is to embed http headers in the payload:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "authorization": "Bearer aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1kUXc0dzlXZ1hjUQ=="\n}\n')),(0,o.kt)("p",null,"Returning ",(0,o.kt)("inlineCode",{parentName:"p"},"Left")," of the query handler function lets the application return an error message to the client, which also immideately closes the websocket.\nOne can embed errors such as ",(0,o.kt)("inlineCode",{parentName:"p"},"unauthorized")," here.\nThe GraphQL over websocket protocol defines no way to communicate arbitary information without closing the connection."))}u.isMDXComponent=!0}}]);