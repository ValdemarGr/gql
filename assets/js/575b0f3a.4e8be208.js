"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[95],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),i=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=i(n),d=r,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(f,p(p({ref:t},u),{},{components:n})):a.createElement(f,p({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,p[1]=s;for(var i=2;i<l;i++)p[i]=n[i];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var a=n(7462),r=(n(7294),n(3905));const l={title:"Input types"},p=void 0,s={unversionedId:"schema/input_types",id:"schema/input_types",title:"Input types",description:"An input type In[A] defines an input type and a mapping from the input type to A.",source:"@site/docs/schema/input_types.md",sourceDirName:"schema",slug:"/schema/input_types",permalink:"/gql/docs/schema/input_types",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/schema/input_types.md",tags:[],version:"current",frontMatter:{title:"Input types"},sidebar:"docs",previous:{title:"Output types",permalink:"/gql/docs/schema/output_types"},next:{title:"The DSL",permalink:"/gql/docs/schema/dsl"}},o={},i=[{value:"Scalar",id:"scalar",level:2},{value:"Enum",id:"enum",level:2},{value:"Arg",id:"arg",level:2},{value:"Input",id:"input",level:2},{value:"Default values for input objects",id:"default-values-for-input-objects",level:3},{value:"Input validation",id:"input-validation",level:2}],u={toc:i};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"An input type ",(0,r.kt)("inlineCode",{parentName:"p"},"In[A]")," defines an input type and a mapping from the input type to ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),".\nInput types occur as parameters in queries as a way to let the caller provide arguments to query resolution."),(0,r.kt)("h2",{id:"scalar"},"Scalar"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Scalar")," type defines a terminal input type, and can be any json value.\n",(0,r.kt)("inlineCode",{parentName:"p"},"Scalar"),"s act as both input and output types; refer to ",(0,r.kt)("a",{parentName:"p",href:"./output_types#scalar"},"output types")," for more information on how scalar types work."),(0,r.kt)("h2",{id:"enum"},"Enum"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Enum")," type defines a mapping from a string to a value (usually a sealed trait) ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),".\nMore information can be found in the ",(0,r.kt)("a",{parentName:"p",href:"./output_types#enum"},"output types")," section."),(0,r.kt)("h2",{id:"arg"},"Arg"),(0,r.kt)("p",null,"The arg type has a couple of uses.\nThe first and simplest way of using args is for, well, arguments.\nThe dsl has a smart constructor for arguments that summons the ",(0,r.kt)("inlineCode",{parentName:"p"},"In[A]")," type from the implicit scope, for the argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import gql.dsl._\nimport gql.ast._\n\n\narg[Int]("superCoolArg")\n')),(0,r.kt)("p",null,"Args can also have default values that can be constructed with the smart constructors from the value dsl ",(0,r.kt)("inlineCode",{parentName:"p"},"gql.dsl.value"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import gql.dsl.value._\n\narg[Int]("superCoolArg", scalar(42))\n')),(0,r.kt)("p",null,"And they can be documented."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'arg[Int]("superCoolArg", scalar(42), "This is a super cool argument")\n\narg[Int]("superCoolArg", "This is a super cool argument")\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Default values are not type-safe, so you can pass any value you want.\nThe default value will however be checked during schema validation, and again during query evaluation, so you will get an error if you pass a value of the wrong type."),(0,r.kt)("p",{parentName:"admonition"},"Input objects makes it impossibly difficult to construct a type-safe default value dsl, since input objects might have default values themselves that allow uses of them to only supply a subset of fields.\nConsult the ",(0,r.kt)("a",{parentName:"p",href:"./input_types#default-values-for-input-objects"},"Default values for input objects")," subsection for more information.")),(0,r.kt)("p",null,"Args also have an ",(0,r.kt)("inlineCode",{parentName:"p"},"Applicative")," instance defined for them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.implicits._\n\n(arg[Int]("arg1"), arg[Int]("arg2", scalar(43))).mapN(_ + _)\n\narg[Int]("arg1") *> arg[Int]("arg2", scalar(44))\n')),(0,r.kt)("p",null,"Args can naturally be used in field definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.effect._\n\nfinal case class Data(str: String)\n\ntpe[IO, Data](\n  "Something",\n  "field" -> pure(arg[String]("arg1", scalar("default"))){ case (data, arg1) => data.str + arg1 }\n)\n')),(0,r.kt)("h2",{id:"input"},"Input"),(0,r.kt)("p",null,"Input is the record type for ",(0,r.kt)("inlineCode",{parentName:"p"},"In"),".\nInput consists of a ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," along with some fields.\nIt turns out that arguments and fields have the same properties and as such, ",(0,r.kt)("inlineCode",{parentName:"p"},"Arg")," is used for fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'final case class InputData(\n  name: String,\n  age: Int\n)\n\ninput[InputData](\n  "InputData",\n  (\n    arg[String]("name"),\n    arg[Int]("age", scalar(42))\n  ).mapN(InputData.apply)\n)\n// res7: Input[InputData] = Input(\n//   name = "InputData",\n//   fields = NonEmptyArg(\n//     nec = Append(\n//       leftNE = Singleton(\n//         a = ArgValue(\n//           name = "name",\n//           input = cats.Later@3f0b4fe5,\n//           defaultValue = None,\n//           description = None\n//         )\n//       ),\n//       rightNE = Singleton(\n//         a = ArgValue(\n//           name = "age",\n//           input = cats.Later@476b5e93,\n//           defaultValue = Some(value = IntValue(v = 42)),\n//           description = None\n//         )\n//       )\n//     ),\n//     decode = scala.Function1$$Lambda$7778/0x00000001024c7840@6192abc4\n//   ),\n//   description = None\n// )\n')),(0,r.kt)("h3",{id:"default-values-for-input-objects"},"Default values for input objects"),(0,r.kt)("p",null,"For input objects however, a default value cannot be properly type checked at compile time, since the default value might be partial.\nFor instance, cosider the following input type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'final case class SomeInput(\n  a: Int,\n  b: String,\n  c: Seq[Int],\n  d: Option[Int]\n)\n\nimplicit lazy val someInput = input[SomeInput](\n  "SomeInput",\n  (\n    arg[Int]("a", scalar(42)),\n    arg[String]("b"),\n    arg[Seq[Int]]("c", arr(scalar(1), scalar(2), scalar(3))),\n    arg[Option[Int]]("d", scalar(42))\n  ).mapN(SomeInput.apply)\n)\n')),(0,r.kt)("p",null,"Two valid uses of this type could for instance be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'arg[SomeInput](\n  "someInput1",\n  obj(\n    "a" -> scalar(42),\n    "b" -> scalar("hello1"),\n    "c" -> arr(Seq(1, 2, 3).map(scalar(_)): _*)\n  )\n)\n\narg[SomeInput](\n  "someInput2",\n  obj(\n    "b" -> scalar("hello2"),\n    "d" -> nullValue\n  )\n)\n')),(0,r.kt)("h2",{id:"input-validation"},"Input validation"),(0,r.kt)("p",null,"Naturally input can also be validated.\nA function ",(0,r.kt)("inlineCode",{parentName:"p"},"emap")," exists on arg, that maps the input to ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidatedNec[String, B]")," for some ",(0,r.kt)("inlineCode",{parentName:"p"},"B"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.data._\n\nfinal case class ValidatedInput(\n  a: Int,\n  b: NonEmptyList[Int]\n)\n\ninput[ValidatedInput](\n  "ValidatedInput",\n  (\n    arg[Int]("a", scalar(42), "May not be negative")\n      .emap(i => if (i < 0) s"Negative value: $i".invalidNec else i.validNec),\n      \n    arg[Seq[Int]]("b", arr(scalar(1), scalar(2), scalar(3)), "NonEmpty")\n      .emap(xs => xs.toList.toNel.toValidNec("Input is empty.")),\n      \n  ).mapN(ValidatedInput.apply)\n   .emap(v => if (v.a > v.b.combineAll) "a must be larger than the sum of bs".invalidNec else v.validNec)\n).document("The field `a` must be larger than the sum of `b`.")\n')))}c.isMDXComponent=!0}}]);