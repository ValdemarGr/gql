"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[601],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3951:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={title:"The schema"},o=void 0,l={unversionedId:"schema/schema",id:"schema/schema",title:"The schema",description:"SchemaShape",source:"@site/docs/schema/schema.md",sourceDirName:"schema",slug:"/schema/",permalink:"/gql/docs/schema/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/schema/schema.md",tags:[],version:"current",frontMatter:{title:"The schema"},sidebar:"docs",previous:{title:"Resolvers",permalink:"/gql/docs/schema/resolvers"},next:{title:"Context",permalink:"/gql/docs/schema/context"}},c={},s=[{value:"SchemaShape",id:"schemashape",level:2},{value:"Validation",id:"validation",level:3},{value:"Schema",id:"schema",level:2}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"schemashape"},"SchemaShape"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SchemaShape")," consists of the roots that make up your gql schema; A query, mutation and subscription type.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"SchemaShape")," also contains extra types that should occur in the schema but are not neccesarilly discoverable through a walk of the ast."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SchemaShape")," also has derived information embedded in it.\nFor instance, one can render the schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\nimport cats.implicits._\nimport gql._\nimport gql.ast._\nimport gql.dsl._\n\ndef ss = SchemaShape.make[IO](\n  tpe[IO, Unit](\n    "Query",\n    "4hello" -> lift(_ => "world")\n  )\n)\n\nprintln(ss.render)\n// type Query {\n//   4hello: String!\n// }\n')),(0,i.kt)("h3",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Validation of the shape is also derived information:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"println(ss.validate)\n// Chain(Invalid field name '4hello', the field name must match /[_A-Za-z][_0-9A-Za-z]*/ at (Query).4hello)\n")),(0,i.kt)("p",null,"Running validation is completely optional, but is highly recommended.\nRunning queries against a unvalidated schema can have unforseen consequences."),(0,i.kt)("p",null,"For instance, here is a non-exhaustive list of things that can go wrong if not validated:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Unforseen runtime errors if two definitions of a type has diverging field definitions."),(0,i.kt)("li",{parentName:"ul"},"Names do not respect the graphql spec."),(0,i.kt)("li",{parentName:"ul"},"Missing interface field implementations."),(0,i.kt)("li",{parentName:"ul"},"Invalid default value structure.")),(0,i.kt)("p",null,"Validation also reports other non-critical issues such as cases of ambiguity."),(0,i.kt)("p",null,"For instance, if a cyclic type is defined with ",(0,i.kt)("inlineCode",{parentName:"p"},"def"),", validation cannot determine if the type is truely valid.\nSolving this would require an infinite amount of time.\nAn exmaple follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'final case class A()\n\ndef cyclicType(i: Int): Type[IO, A] = {\n  if (i < 10000) tpe[IO, A](\n    "A",\n    "a" -> lift((_: A) => A())(cyclicType(i + 1))\n  )\n  else tpe[IO, A](\n    "A",\n    "a" -> lift(_ => "now I\'m a string :)")\n  )\n}\n\nimplicit lazy val cyclic: Type[IO, A] = cyclicType(0)\n\ndef recursiveSchema = SchemaShape.make[IO](\n  tpe[IO, Unit](\n    "Query",\n    "a" -> lift(_ => A())\n  )\n)\n\nrecursiveSchema.validate.toList.mkString("\\n")\n// res2: String = "Cyclic type `A` is not reference equal. Use lazy val or `cats.Eval` to declare this type. at (Query).a(A).a(A)"\n')),(0,i.kt)("p",null,"After ",(0,i.kt)("inlineCode",{parentName:"p"},"10000")," iterations the type is no longer unifyable."),(0,i.kt)("p",null,"One can also choose to simply ignore some of the validation errors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'recursiveSchema.validate.filter{\n  case Validation.Problem(Validation.Error.CyclicDivergingTypeReference("A"), _) => false\n  case _ => true\n}\n// res3: cats.data.Chain[Validation.Problem] = Chain()\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Validation does not attempt structural equallity since this can have unforseen performance consequences."),(0,i.kt)("p",{parentName:"admonition"},"For instance, if the whole graph was defined with ",(0,i.kt)("inlineCode",{parentName:"p"},"def"),"s, one could very easily accedentally construct a case of exponential running time.")),(0,i.kt)("h2",{id:"schema"},"Schema"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," is a collection of some components that are required to execute a query.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"SchemaShape"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"Statistics")," instance, a query ",(0,i.kt)("inlineCode",{parentName:"p"},"Planner")," implementation and state regarding ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchResolver")," implementations."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Check out the ",(0,i.kt)("a",{parentName:"p",href:"../execution/statistics"},"statistics section")," for more information on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Statistics")," object."),(0,i.kt)("p",{parentName:"admonition"},"Also, check out the ",(0,i.kt)("a",{parentName:"p",href:"../execution/planning"},"planning section")," for more information on how the default query planner works."),(0,i.kt)("p",{parentName:"admonition"},"Finally, you can look in the ",(0,i.kt)("a",{parentName:"p",href:"./resolvers"},"resolver section")," for more information on ",(0,i.kt)("inlineCode",{parentName:"p"},"BatchResolver"),"s.")),(0,i.kt)("p",null,"The most powerful ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," constructor ",(0,i.kt)("inlineCode",{parentName:"p"},"stateful"),", converts a ",(0,i.kt)("inlineCode",{parentName:"p"},"State[SchemaState[F], SchemaShape[F, Q, M, S]]")," to a ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema[F, Q, M, S]"),"."))}m.isMDXComponent=!0}}]);