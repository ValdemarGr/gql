"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[226],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>u});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),l=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=l(a),u=r,E=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return a?t.createElement(E,o(o({ref:n},d),{},{components:a})):t.createElement(E,o({ref:n},d))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=a[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6156:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var t=a(7462),r=(a(7294),a(3905));const i={title:"Example"},o="Example",p={unversionedId:"overview/example",id:"overview/example",title:"Example",description:"gql is a GraphQL implementation.",source:"@site/docs/overview/example.md",sourceDirName:"overview",slug:"/overview/example",permalink:"/gql/docs/overview/example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/overview/example.md",tags:[],version:"current",frontMatter:{title:"Example"},sidebar:"docs",next:{title:"Getting started",permalink:"/gql/docs/overview/getting_started"}},s={},l=[],d={toc:l};function c(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"example"},"Example"),(0,r.kt)("p",null,"gql is a GraphQL implementation.\ngql comes with many of the standard features of a GraphQL implementation such as a dsl, parser and interpreter.\nBut also some unique features such as, herustic query planning and signals.\nThe most important goals of gql is to be simple, predictable and composable."),(0,r.kt)("p",null,"For this showcase, Star Wars will be out domain of choice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"sealed trait Episode\n\nobject Episode {\n  case object NEWHOPE extends Episode\n  case object EMPIRE extends Episode\n  case object JEDI extends Episode\n}\n\ntrait Character {\n  def id: String\n  def name: Option[String]\n  def friends: List[String]\n  def appearsIn: List[Episode]\n}\n\nfinal case class Human(\n    id: String,\n    name: Option[String],\n    friends: List[String],\n    appearsIn: List[Episode],\n    homePlanet: Option[String]\n) extends Character\n\nfinal case class Droid(\n    id: String,\n    name: Option[String],\n    friends: List[String],\n    appearsIn: List[Episode],\n    primaryFunction: String\n) extends Character\n")),(0,r.kt)("p",null,"Lets define where our data comes from:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"trait Repository[F[_]] {\n  def getHero(episode: Option[Episode]): F[Character]\n\n  def getCharacter(id: String): F[Option[Character]]\n\n  def getHuman(id: String): F[Option[Human]]\n\n  def getDroid(id: String): F[Option[Droid]]\n}\n")),(0,r.kt)("p",null,"To construct the schema, we need some imports."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import gql._\nimport gql.dsl._\nimport gql.ast._\nimport cats.effect._\nimport cats.implicits._\n")),(0,r.kt)("p",null,"Now we can define our schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def schema[F[_]](implicit repo: Repository[F], F: Async[F]) = {\n  implicit lazy val episode = enumType[F, Episode](\n    "Episode",\n    "NEWHOPE" -> enumVal(Episode.NEWHOPE),\n    "EMPIRE" -> enumVal(Episode.EMPIRE),\n    "JEDI" -> enumVal(Episode.JEDI)\n  )\n\n  implicit lazy val character: Interface[F, Character] = interface[F, Character](\n    "Character",\n    "id" -> pure(_.id),\n    "name" -> pure(_.name),\n    "friends" -> eff(_.friends.traverse(repo.getCharacter)),\n    "appearsIn" -> pure(_.appearsIn),\n    "secretBackstory" -> fallible(_ => F.pure("secretBackstory is secret.".leftIor[String]))\n  )\n\n  implicit lazy val human = tpe[F, Human](\n    "Human",\n    "homePlanet" -> pure(_.homePlanet)\n  ).subtypeOf[Character].addFields(character.fields.toList: _*)\n\n  implicit lazy val droid = tpe[F, Droid](\n    "Droid",\n    "primaryFunction" -> pure(_.primaryFunction)\n  ).subtypeOf[Character] .addFields(character.fields.toList: _*)\n\n  Schema.query(\n    tpe[F, Unit](\n      "Query",\n      "hero" -> eff(arg[Option[Episode]]("episode")) { case (_, ep) => repo.getHero(ep) },\n      "human" -> eff(arg[String]("id")) { case (_, id) => repo.getHuman(id) },\n      "droid" -> eff(arg[String]("id")) { case (_, id) => repo.getDroid(id) }\n    )\n  )\n}\n')),(0,r.kt)("p",null,"Lets construct a simple in-memory repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val luke = Human(\n  "1000",\n  "Luke Skywalker".some,\n  "1002" :: "1003" :: "2000" :: "2001" :: Nil,\n  Episode.NEWHOPE :: Episode.EMPIRE :: Episode.JEDI :: Nil,\n  "Tatooine".some\n)\n\nval vader = Human(\n  "1001",\n  "Darth Vader".some,\n  "1004" :: Nil,\n  Episode.NEWHOPE :: Episode.EMPIRE :: Episode.JEDI :: Nil,\n  "Tatooine".some\n)\n\nval han = Human(\n  "1002",\n  "Han Solo".some,\n  "1000" :: "1003" :: "2001" :: Nil,\n  Episode.NEWHOPE :: Episode.EMPIRE :: Episode.JEDI :: Nil,\n  None\n)\n\nval leia = Human(\n  "1003",\n  "Leia Organa".some,\n  "1000" :: "1002" :: "2000" :: "2001" :: Nil,\n  Episode.NEWHOPE :: Episode.EMPIRE :: Episode.JEDI :: Nil,\n  "Alderaan".some\n)\n\nval tarkin = Human(\n  "1004",\n  "Wilhuff Tarkin".some,\n  "1001" :: Nil,\n  Episode.NEWHOPE :: Nil,\n  None\n)\n\nval humanData =\n  List(luke, vader, han, leia, tarkin)\n    .map(x => x.id -> x)\n    .toMap\n\nval threepio = Droid(\n  "2000",\n  "C-3PO".some,\n  "1000" :: "1002" :: "1003" :: "2001" :: Nil,\n  Episode.NEWHOPE :: Episode.EMPIRE :: Episode.JEDI :: Nil,\n  "Protocol"\n)\n\nval artoo = Droid(\n  "2001",\n  "R2-D2".some,\n  "1000" :: "1002" :: "1003" :: Nil,\n  Episode.NEWHOPE :: Episode.EMPIRE :: Episode.JEDI :: Nil,\n  "Astromech"\n)\n\nval droidData =\n  List(threepio, artoo)\n    .map(x => x.id -> x)\n    .toMap\n\nimplicit def repo = new Repository[IO] {\n  def getHero(episode: Option[Episode]): IO[Character] =\n    if (episode.contains(Episode.EMPIRE)) IO(luke)\n    else IO(artoo)\n    \n  def getCharacter(id: String): IO[Option[Character]] =\n    IO(humanData.get(id) orElse droidData.get(id))\n    \n  def getHuman(id: String): IO[Option[Human]] =\n    IO(humanData.get(id))\n    \n  def getDroid(id: String): IO[Option[Droid]] =\n    IO(droidData.get(id))\n}\n\n')),(0,r.kt)("p",null,"Lets construct a query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def query = """\n query ExampleQuery {\n   hero(episode: NEWHOPE) {\n     id\n     name\n     __typename\n     ... on Droid {\n       primaryFunction\n       friends {\n         name\n         __typename\n         appearsIn\n       }\n     }\n     ... HumanDetails\n   }\n   c3po: droid(id: "2000") {\n    name\n   }\n }\n\n fragment HumanDetails on Human {\n   homePlanet\n }\n"""\n')),(0,r.kt)("p",null,"Now we can parse, plan and evaluate the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'schema[IO]\n  .map(Compiler[IO].compile(_, query))\n  .flatMap { case Right(Application.Query(run)) => run.map(_.asGraphQL) }\n// object[data -> {\n//   "c3po" : {\n//     "name" : "C-3PO"\n//   },\n//   "hero" : {\n//     "friends" : [\n//       {\n//         "appearsIn" : [\n//           "NEWHOPE",\n//           "EMPIRE",\n//           "JEDI"\n//         ],\n//         "__typename" : "Human",\n//         "name" : "Luke Skywalker"\n//       },\n//       {\n//         "appearsIn" : [\n//           "NEWHOPE",\n//           "EMPIRE",\n//           "JEDI"\n//         ],\n//         "__typename" : "Human",\n//         "name" : "Han Solo"\n//       },\n//       {\n//         "appearsIn" : [\n//           "NEWHOPE",\n//           "EMPIRE",\n//           "JEDI"\n//         ],\n//         "__typename" : "Human",\n//         "name" : "Leia Organa"\n//       }\n//     ],\n//     "primaryFunction" : "Astromech",\n//     "__typename" : "Droid",\n//     "name" : "R2-D2",\n//     "id" : "2001"\n//   }\n// }]\n')))}c.isMDXComponent=!0}}]);