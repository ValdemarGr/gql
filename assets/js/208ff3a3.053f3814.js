"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={title:"Compiler"},o=void 0,c={unversionedId:"server/schema/compiler",id:"server/schema/compiler",title:"Compiler",description:"The Compiler is a utility for combining multiple parts of gql into a single executable.",source:"@site/docs/server/schema/compiler.md",sourceDirName:"server/schema",slug:"/server/schema/compiler",permalink:"/gql/docs/server/schema/compiler",draft:!1,editUrl:"https://github.com/valdemargr/gql/tree/main/docs/server/schema/compiler.md",tags:[],version:"current",frontMatter:{title:"Compiler"},sidebar:"docs",previous:{title:"Error handling",permalink:"/gql/docs/server/schema/error_handling"},next:{title:"Extending schemas",permalink:"/gql/docs/server/schema/extending"}},l={},s=[],p={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Compiler")," is a utility for combining multiple parts of ",(0,a.kt)("inlineCode",{parentName:"p"},"gql")," into a single executable."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Compiler")," utility has the task of parsing, preparing (validating) and construction an executable version of a GraphQL query.\nThe output of query compilation is either an error or an ",(0,a.kt)("inlineCode",{parentName:"p"},"Application"),"; an executable version of the query that closes over all required inputs:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import gql._\n\nsealed trait Application[F[_]]\nobject Application {\n  final case class Query[F[_]](run: F[QueryResult]) extends Application[F]\n  final case class Mutation[F[_]](run: F[QueryResult]) extends Application[F]\n  final case class Subscription[F[_]](run: fs2.Stream[F, QueryResult]) extends Application[F]\n}\n")),(0,a.kt)("p",null,"For most applications there is need for more steps than just preparing the query.\nFor instance production deployments can implement features such as caching, logging, metrics, tracing, authorization, to name a few.\nThe compiler utility consists of methods for (parsing, preparing and assembling an application) and can be composed to solve sophisticated use cases."),(0,a.kt)("p",null,"For instance, say that we would like to modify a phase in query compilation, such that the final executable logs queries that are too slow."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import gql._\nimport cats.implicits._\nimport cats.effect._\nimport cats.effect.implicits._\nimport scala.concurrent.duration._\n\ntrait Logger[F[_]] {\n  def warn(msg: String): F[Unit]\n}\n\ndef lg: Logger[IO] = ???\n\ndef logSlowQueries(query: String, app: Application[IO]): Application[IO] = app match {\n  case Application.Query(fa) => \n    Application.Query {\n      fa.timed.flatMap{ case (dur, a) =>\n        if (dur > 1.second) lg.warn(s"Slow query: $query") as a\n        else IO.pure(a)\n      }\n    }\n  case x => x\n}\n')),(0,a.kt)("p",null,"Or another example, we have a cache that we wish to clear between subscription events."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"trait Cache[F[_]] {\n  def clear: F[Unit]\n  // other cache related functions ...\n}\n\ndef addCacheClearing(cache: Cache[IO], app: Application[IO]): Application[IO] = app match {\n  case Application.Subscription(stream) => \n    Application.Subscription {\n      // gql doesnt not evaluate the next event before the previous has been consumed\n      stream.evalTap(_ => cache.clear)\n    }\n  case x => x\n}\n")))}u.isMDXComponent=!0}}]);